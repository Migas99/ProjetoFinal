type Query {
    louvain: [Louvain]
    localClustering: [LocalClustering]
    pageRank: [PageRank]
    betweennessCentrality: [BetweennessCentrality]
    nodeSimilarity: [NodeSimilarity]
    commonNeighbors: [CommonNeighbors]

    getListOfInvoicesNotAssociatedWithCustomers: [ListOfInvoicesNotAssociatedWithCustomers]
    getListOfNegativeAmountsInGeneralLedger: [NegativeAmountsInGeneralLedger]
    getListOfDaysWithoutSales: [ListOfDaysWithoutSales]
    getListOfNetTotalAndTaxPayableByTaxCode: [NetTotalAndTaxPayableByTaxCode]
    getListOfSalesByPeriod: [SalesByPeriod]

    getListOfFilesByCompany: [FilesByCompany]
    getListOfCompanyRepresentants(companyName: String): RepresentantsByCompany
    getFileByName(fileName: String): AuditFile
}

type Louvain {
    CommunityNumber: Int
    Companies: [String]
}

type LocalClustering {
    Company: String
    Coefficient: Float
}

type PageRank {
    Company: String
    Score: Float
}

type BetweennessCentrality {
    Company: String
    Score: Float
}

type NodeSimilarity {
    CompanyOne: String
    CompanyTwo: String
    Similarity: Float
}

type CommonNeighbors {
    CompanyOne: String
    CompanyTwo: String
    Score: Float
}

type ListOfInvoicesNotAssociatedWithCustomers {
    Company: String
    Files: [ListOfInvoicesNotAssociatedWithCustomers2]
}

type ListOfInvoicesNotAssociatedWithCustomers2 {
    FileName: String
    InvoicesNo: [String]
}

type NegativeAmountsInGeneralLedger {
    Company: String
    Files: [NegativeAmountsInGeneralLedger2]
}

type NegativeAmountsInGeneralLedger2 {
    FileName: String
    NegativeAmountsInGeneralLedger: [NegativeAmountsInGeneralLedger3]
}

type NegativeAmountsInGeneralLedger3 {
    JournalID: String
    Transactions: [NegativeAmountsInGeneralLedger4]
}

type NegativeAmountsInGeneralLedger4 {
    TransactionID: String
    CreditLines: [NegativeAmountsInGeneralLedger5]
    DebitLines: [NegativeAmountsInGeneralLedger6]
}

type NegativeAmountsInGeneralLedger5 {
    RecordID: String
    CreditAmount: Float
}

type NegativeAmountsInGeneralLedger6 {
    RecordID: String
    DebitAmount: Float
}

type ListOfDaysWithoutSales {
    Company: String
    Files: [ListOfDaysWithoutSales2]
}

type ListOfDaysWithoutSales2 {
    FileName: String
    FiscalYear: Int
    StartDate: String
    EndDate: String
    DaysWithoutSales: [String]
}

type NetTotalAndTaxPayableByTaxCode {
    Company: String
    Files: [NetTotalAndTaxPayableByTaxCode2]
}

type NetTotalAndTaxPayableByTaxCode2 {
    FileName: String
    FiscalYear: Int
    NetTotalAndTaxPayableByTaxCode: [NetTotalAndTaxPayableByTaxCode3]
}

type NetTotalAndTaxPayableByTaxCode3 {
    TaxCode: String
    TotalNetTotal: Float
    TotalTaxPayable: Float
}

type SalesByPeriod {
    Company: String
    Files: [SalesByPeriod2]
}

type SalesByPeriod2 {
    FileName: String
    FiscalYear: Int
    SalesByPeriod: [SalesByPeriod3]
}

type SalesByPeriod3 {
    Period: Int
    TotalSalesWithoutTax: Float
    TotalSalesWithTax: Float
}

type FilesByCompany {
    Company: String
    Files: [FilesByCompany2]
}

type FilesByCompany2 {
    FileName: String
    FiscalYear: Int
}

type RepresentantsByCompany {
    Company: String
    RepresentantsAsCustomer: [Customer]
    RepresentantsAsSupplier: [Supplier]
}

type AuditFile {
    Header: Header
    MasterFiles: MasterFiles
    GeneralLedgerEntries: GeneralLedgerEntries
    SourceDocuments: SourceDocuments
}

type Header {
    AuditFileVersion: String
    CompanyID: String
    TaxRegistrationNumber: Int
    TaxAccountingBasis: String
    CompanyName: String
    BusinessName: String
    CompanyAddress: CompanyAddress
    FiscalYear: Int
    StartDate: String
    EndDate: String
    CurrencyCode: String
    DateCreated: String
    TaxEntity: String
    ProductCompanyTaxID: String
    SoftwareCertificateNumber: String
    ProductID: String
    ProductVersion: String
    HeaderComment: String
    Telephone: String
    Fax: String
    Email: String
    Website: String
}

type CompanyAddress {
    BuildingNumber: String
    StreetName: String
    AddressDetail: String
    City: String
    PostalCode: String
    Region: String
    Country: String
}

type MasterFiles {
    GeneralLedgerAccounts: GeneralLedgerAccounts
    Customers: [Customer]
    Suppliers: [Supplier]
    Products: [Product]
    TaxTable: TaxTable
}

type GeneralLedgerAccounts {
    TaxonomyReference: String
    Accounts: [Account]
}

type Account {
    AccountID: String
    AccountDescription: String
    OpeningDebitBalance: Float
    OpeningCreditBalance: Float
    ClosingDebitBalance: Float
    ClosingCreditBalance: Float
    GroupingCategory: String
    GroupingCode: String
    TaxonomyCode: Int
}

type Customer {
    CustomerID: String
    AccountID: String
    CustomerTaxID: String
    CompanyName: String
    Contact: String
    BillingAddress: BillingAddress
    ShipToAddress: [ShipToAddress]
    Telephone: String
    Fax: String
    Email: String
    Website: String
    SelfBillingIndicator: Int
}

type Supplier {
    SupplierID: String
    AccountID: String
    SupplierTaxID: String
    CompanyName: String
    Contact: String
    BillingAddress: BillingAddress
    ShipFromAddress: [ShipFromAddress]
    Telephone: String
    Fax: String
    Email: String
    Website: String
    SelfBillingIndicator: Int
}

type BillingAddress {
    BuildingNumber: String
    StreetName: String
    AddressDetail: String
    City: String
    PostalCode: String
    Region: String
    Country: String
}

type ShipToAddress {
    BuildingNumber: String
    StreetName: String
    AddressDetail: String
    City: String
    PostalCode: String
    Region: String
    Country: String
}

type ShipFromAddress {
    BuildingNumber: String
    StreetName: String
    AddressDetail: String
    City: String
    PostalCode: String
    Region: String
    Country: String
}

type Product {
    ProductType: String
    ProductCode: String
    ProductGroup: String
    ProductDescription: String
    ProductNumberCode: String
    CustomsDetails: [CustomsDetails]
}

type CustomsDetails {
    CNCode: String
    UNNumber: String
}

type TaxTable {
    TaxTableEntries: [TaxTableEntry]
}

type TaxTableEntry {
    TaxType: String
    TaxCountryRegion: String
    TaxCode: String
    Description: String
    TaxExpirationDate: String
    TaxPercentage: Float
    TaxAmount: Float
}

type GeneralLedgerEntries {
    NumberOfEntries: Int
    TotalDebit: Float
    TotalCredit: Float
    Journals: [Journal]
}

type Journal {
    JournalID: String
    Description: String
    Transactions: [Transaction]
}

type Transaction {
    TransactionID: String
    Period: Int
    TransactionDate: String
    SourceID: String
    Description: String
    DocArchivalNumber: String
    TransactionType: String
    GLPostingDate: String
    CustomerID: String
    SupplierID: String
    Lines: Lines
}

type Lines {
    DebitLines: [DebitLine]
    CreditLines: [CreditLine]
}

type DebitLine {
    RecordID: String
    AccountID: String
    SourceDocumentID: String
    SystemEntryDate: String
    Description: String
    DebitAmount: Float
}

type CreditLine {
    RecordID: String
    AccountID: String
    SourceDocumentID: String
    SystemEntryDate: String
    Description: String
    CreditAmount: Float
}

type SourceDocuments {
    SalesInvoices: SalesInvoices
    MovementOfGoods: Boolean
    WorkingDocuments: Boolean
    Payments: Boolean
}

type SalesInvoices {
    NumberOfEntries: Int
    TotalDebit: Float
    TotalCredit: Float
    Invoices: [Invoice]
}

type Invoice {
    InvoiceNo: String
    ATCUD: String
    DocumentStatus: DocumentStatus
    Hash: String
    HashControl: String
    Period: Int
    InvoiceDate: String
    InvoiceType: String
    SpecialRegimes: SpecialRegimes
    SourceID: String
    EACCode: String
    SystemEntryDate: String
    TransactionID: String
    CustomerID: String
    ShipTo: ShipTo
    ShipFrom: ShipFrom
    MovementEndTime: String
    MovementStartTime: String
    Lines: [Line]
    DocumentTotals: DocumentTotals
    WithholdingTaxs: [WithholdingTax]
}

type DocumentStatus {
    InvoiceStatus: String
    InvoiceStatusDate: String
    Reason: String
    SourceID: String
    SourceBilling: String
}

type SpecialRegimes {
    SelfBillingIndicator: Int
    CashVATSchemeIndicator: Int
    ThirdPartiesBillingIndicator: Int
}

type ShipTo {
    DeliveryID: String
    DeliveryDate: String
    WarehouseID: String
    LocationID: String
    Address: Address
}

type ShipFrom {
    DeliveryID: String
    DeliveryDate: String
    WarehouseID: String
    LocationID: String
    Address: Address
}

type Address {
    BuildingNumber: String
    StreetName: String
    AddressDetail: String
    City: String
    PostalCode: String
    Region: String
    Country: String
}

type Line {
    LineNumber: Int
    OrderReferences: [OrderReferences]
    ProductCode: String
    ProductDescription: String
    Quantity: Float
    UnitOfMeasure: String
    UnitPrice: Float
    TaxBase: Float
    TaxPointDate: String
    References: [References]
    Description: String
    ProductSerialNumbers: [ProductSerialNumber]
    DebitAmount: Float
    CreditAmount: Float
    Taxs: [Tax]
    TaxExemptionReason: String
    TaxExemptionCode: String
    SettlementAmount: Float
    CustomsInformation: CustomsInformation
}

type OrderReferences {
    OriginatingON: String
    OrderDate: String
}

type References {
    Reference: String
    Reason: String
}

type ProductSerialNumber {
    SerialNumber: String
}

type Tax {
    TaxType: String
    TaxCountryRegion: String
    TaxCode: String
    TaxPercentage: Float
    TaxAmount: Float
}

type CustomsInformation {
    ARCNo: String
    IECAmount: Float
}

type DocumentTotals {
    TaxPayable: Float
    NetTotal: Float
    GrossTotal: Float
    Currency: Currency
    Settlements: [Settlement]
    Payments: [Payment]
}

type Currency {
    CurrencyCode: String
    CurrencyAmount: Float
    ExchangeRate: Float
}

type Settlement {
    SettlementDiscount: String
    SettlementAmount: Float
    SettlementDate: String
    PaymentTerms: String
}

type Payment {
    PaymentMechanism: String
    PaymentAmount: Float
    PaymentDate: String
}

type WithholdingTax {
    WithholdingTaxType: String
    WithholdingTaxDescription: String
    WithholdingTaxAmount: Float
}

