type Query {
    detectCommunitiesWithLouvain: [Louvain]
    detectCommunitiesWithLocalClustering: [LocalClustering]
    pageRank: [PageRank]
    nodeSimilarity: [NodeSimilarity]

    getListOfInvoicesNotAssociatedWithCustomers: [ListOfInvoicesNotAssociatedWithCustomers]
    getListOfNegativeAmountsInGeneralLedger: [NegativeAmountsInGeneralLedger]
    getListOfDaysWithoutSales: [ListOfDaysWithoutSales]
    getListOfNetTotalAndTaxPayableByTaxCode: [NetTotalAndTaxPayableByTaxCode]
    getListOfSalesByPeriod: [SalesByPeriod]
}

type Louvain {
    CommunityNumber: Int
    Companies: [String]
}

type LocalClustering {
    Company: String
    Coefficient: Float
}

type PageRank {
    Company: String
    Score: Float
}

type NodeSimilarity {
    CompanyOne: String
    CompanyTwo: String
    Similarity: Float
}

type ListOfInvoicesNotAssociatedWithCustomers {
    Company: String
    Files: [ListOfInvoicesNotAssociatedWithCustomers2]
}

type ListOfInvoicesNotAssociatedWithCustomers2 {
    FileName: String
    InvoicesNo: [String]
}

type NegativeAmountsInGeneralLedger {
    Company: String
    Files: [NegativeAmountsInGeneralLedger2]
}

type NegativeAmountsInGeneralLedger2 {
    FileName: String
    NegativeAmountsInGeneralLedger: [NegativeAmountsInGeneralLedger3]
}

type NegativeAmountsInGeneralLedger3 {
    Journal: String
    Transactions: [NegativeAmountsInGeneralLedger4]
}

type NegativeAmountsInGeneralLedger4 {
    Transaction: String
    CreditLines: [NegativeAmountsInGeneralLedger5]
    DebitLines: [NegativeAmountsInGeneralLedger6]
}

type NegativeAmountsInGeneralLedger5 {
    RecordID: String
    CreditAmount: Float
}

type NegativeAmountsInGeneralLedger6 {
    RecordID: String
    DebitAmount: Float
}

type ListOfDaysWithoutSales {
    Company: String
    Files: [ListOfDaysWithoutSales2]
}

type ListOfDaysWithoutSales2 {
    FileName: String
    FiscalYear: Int
    StartDate: String
    EndDate: String
    DaysWithoutSales: [String]
}

type NetTotalAndTaxPayableByTaxCode {
    Company: String
    Files: [NetTotalAndTaxPayableByTaxCode2]
}

type NetTotalAndTaxPayableByTaxCode2 {
    FileName: String
    FiscalYear: Int
    NetTotalAndTaxPayableByTaxCode: [NetTotalAndTaxPayableByTaxCode3]
}

type NetTotalAndTaxPayableByTaxCode3 {
    TaxCode: String
    TotalNetTotal: Float
    TotalTaxPayable: Float
}

type SalesByPeriod {
    Company: String
    Files: [SalesByPeriod2]
}

type SalesByPeriod2 {
    FileName: String
    FiscalYear: Int
    SalesByPeriod: [SalesByPeriod3]
}

type SalesByPeriod3 {
    Period: Int
    TotalSalesWithoutTax: Float
    TotalSalesWithTax: Float
}